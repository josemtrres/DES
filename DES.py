import random
def key():
    key = ""
    for i in range(0,64):
        a = random.choices([0,1])
        key += str(a[0])
    return key
#Key =  key()

tcp1 =  [
            57,49,41,33,25,17,9,
            1,58,50,42,34,26,18,
            10,2,59,51,43,35,27,
            19,11,3,60,52,44,36,
            63,55,47,39,31,23,15,
            7,62,54,46,38,30,22,
            14,6,61,53,45,37,29,
            21,13,5,28,20,12,4
        ]

tcp2 = [
            14, 17,11,24,1,5,3,28,
            15,6,21,10,23,19,12,4,
            26,8,16,7,27,20,13,2,
            41,52,31,37,47,55,30,40,
            51,45,33,48,44,49,39,56,
            34,53,46,42,50,36,29,32
        ]

def E (R):
    E = [   
            32,1,2,3,4,5,
            4,5,6,7,8,9,
            8,9,10,11,12,13,
            12,13,14,15,16,17,
            16,17,18,19,20,21,
            20,21,22,23,24,25,
            24,25,26,27,28,29,
            28,29,30,31,32,1
        ]
    
    for x in range(0,len(E)):
        i = E[x]
        E[x] = R[i-1]
    return E

def L_Shift(C, D):
    Ci = C[1:] + C[:1]
    Di = D[1:] + D[:1]
    return Ci, Di

def XOR(A,B):
    C= ""
    for i in range (0,len(A)):
        if A[i] == B[i]:
            C += str(0)
        else:
            C += str(1)
    return C

def ABin(Sbox):
    tmp=""
    for x in Sbox:
        if len(bin(x)[2:]) < 4:
            b = bin(x)[2:]
            for i in range (0,4-len(bin(x)[2:])):
                b = str(0) + b
            tmp+=b    
        else:
            tmp += bin(x)[2:]
    return tmp

def S(xor):
    sbox =[]
    a = 1
    b = 5
    S = [
            [
                [14, 4, 13, 1, 2, 15, 11, 18, 3, 10, 6, 12, 5, 9, 0, 7],
                [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
                [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
                [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
            ],
            [
                [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
                [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
                [0, 14, 7 ,11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
                [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
            ],
            [
                [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
                [13, 7, 0, 9, 2, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
                [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
                [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
            ],
            [
                [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
                [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
                [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
                [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]
            ],
            [
                [1, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
                [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
                [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
                [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
            ],
            [
                [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
                [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
                [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
                [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]
            ],
            [
                [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
                [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
                [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
                [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]  
            ],
            [
                [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
                [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
                [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
                [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]
            ],
            [
                [13, 2, 5, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
                [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
                [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
                [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
            ]
        ]
    for x in range (0,8):
        sbox.append(S[x][int(xor[x*6]+xor[(x+1)*6-1],2)][int(xor[a:b],2)])
        a+=6
        b+=6
    return ABin(sbox)

def P(Sbox):
    tmp = ""
    p = [
            16,	7,	20,	21,	29,	12,	28,	17,
            1,	15,	23,	26,	5,	18,	31,	10,
            2,	8,	24,	14,	32,	27,	3,	9,
            19,	13,	30,	6,	22,	11,	4,	25
        ]
    
    for x in range(0,len(p)):
        i = p[x]
        p[x] = Sbox[i-1]

    for x in p:
        tmp += str(x)
    return tmp

def Subkey (key): #Funcion que recibe una llave de 56 bits y retorna una subllave de 48
    tmp_tcp2 = tcp2
    C = key[:28]
    D = key[28:]
    Ci, Di = L_Shift(C,D)
    
    Key  ==  Ci+Di

    for x in range (0, len(tcp2)):
        i = tmp_tcp2[x]
        tmp_tcp2[x] = key[i-1]
    return tmp_tcp2 #retorna la subllave de 48 bits

def F (R, key):
    subkey = Subkey(key) #subllave de 48b
    R_e = E(R) #expansion de Ri
    xor = XOR(R_e, subkey)
    Sbox = S(xor)
    f = P(Sbox)
    return f

tc = "0110100001100101011011000110110001101111001000000111100101101111"
te = "0110111100100000011110010110111101000010101011001111110000101000"
Key = '1001001110111011000110010001111111101010001100111010011100001001'
def DES(t, key):
    L = t[:32]
    R = t[32:]
    f = F(R, key)
    xor = XOR(L, f)
    te = R+xor
    return te

print(DES(tc,Key))
